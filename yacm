#!/bin/sh

YACM_BASE_DIR=;
YACM_DIR=;
YACM_PROFILES_DIR=;

function main() {
  # Capture full command, for passing to hooks
  # the parameters will be space delimited and
  # spaces, tabs, and backslashes will be escaped
  _tab=$'\t'
  for param in "$@"; do
    param="${param//\\/\\\\}"
    param="${param//$_tab/\\$_tab}"
    param="${param// /\\ }"
    _fc+=( "$param" )
  done
  FULL_COMMAND="${_fc[*]}"

  # Create the YACM_DIR & YACM_DATA if they doesn't exist yet
  [ -d "$YACM_BASE_DIR" ] || mkdir -p "$YACM_BASE_DIR"
  [ -d "$YACM_DIR" ] || mkdir -p "$YACM_DIR"
  [ -d "$YACM_PROFILES_DIR" ] || mkdir -p "$YACM_PROFILES_DIR"

  local retval=0
  internal_commands="^(bootstrap|help|--help|init|profile|version|--version)$"

  if [ -z "$1" ] ; then
    # No argumnts will result in help()
    help;
  elif [[ "$1" =~ $internal_commands ]]; then
    case "$1" in
      help|--help)
        help;;
      init)
        init $2;;
      profile)
        profile $2;;
    esac
  else
    # Invalid command, throw error and run help menu
    echo -e '\e[31mIt appears you have entered an invalid command!\e[0m\n';
    help
  fi    
}

function help() {
  local msg
  IFS='' read -r -d '' msg << EOF
Configure your system(s) with any executable(s) YOU design!

Usage: yacm <command> [options...]

Commands:
  yacm bootstrap - Bootstrap the current system
  yacm init      - Initalize a new profile for a system
  yacm help      - Prints this menu
  yacm version   - Prints current yacm version

Global options (use before subcommands, if any):
  -help          - Prints this menu or the help menu for subcommands
  -version       - Prints current yacm version
EOF
  printf '%s\n' "$msg"
}

function init_help() {
  local msg
  IFS='' read -r -d '' msg << EOF
Used to create profile if none are present and
set default profile for current system.

Usage: yacm [global options] init

Subcommands:
  help   - Prints this menu

Alternative subcommands:
  --help - Prints this menu
EOF
  printf '%s\n' "$msg"
}

function profile_help() {
  local msg
  IFS='' read -r -d '' msg << EOF
Used to create and manage yacm profiles

Usage: yacm [global options] profile

Subcommands:
  create   - Creates a new profile
  delete   - Deletes a profile
  list     - List profiles on system
  help     - Prints this menu

Alternative subcommands:
  --create - Creates a new profile
  --delete - Deletes a profile
  --list   - List profiles on system
  --help   - Prints this menu
EOF
  printf '%s\n' "$msg"
}

function init() {
  if [[ -z $1 ]]; then
    echo -e "Initializng yacm...\n";
    profile create;
    echo -e "\nFinished initializing yacm!";
  else
    case "$1" in
      help|--help)
        init_help;;
      *)
        echo -e "\e[31mUnrecognized subcommand for init command.\e[0m\n";
        init_help;;
    esac
  fi
}

function profile() {
  if [[ ! -z $1 ]]; then
    case "$1" in
      help|--help)
        profile_help;;
      list|--list)
        if [ ! -z "$(ls $YACM_PROFILES_DIR/*.yml 2>/dev/null)" ]; then
          echo -e "Profiles:";
          for file in $(ls $YACM_PROFILES_DIR/*.yml);
          do
            echo "  $(basename $file .yml)";
          done
        else
          echo -e "\e[31mNo profiles present!\e[0m\n";
          echo -e "\e[31mPleace run \e[32myacm init\e[31m!\e[0m";
        fi;;
      create|--create)
        # TODO finish profile creation function
        echo -e "Creating new profile...\n";
        echo "What would you like this profile to be called?";
        read profile_name;
        if [[ ! -f "$YACM_PROFILES_DIR/$profile_name.yml" ]]; then
          profile_create $profile_name;
        else
          echo "Profile already exists!";
          read -p "Would you like to recreate it? (y/N)" yn
          case $yn in
            [Yy]*)
              rm $YACM_PROFILES_DIR/$profile_name.yml;
              profile_create $profile_name;;
            [Nn]*)
              echo "no";;
            "")
              echo "no";;
            *)
              echo "Please answer yes or no.";;
          esac
        fi;;
      delete|--delete)
        if [ ! -z "$(ls $YACM_PROFILES_DIR/*.yml 2>/dev/null)" ]; then
          echo -e "Which profile would you like to delete?\n";
          profile list
          read profile_name;
          if [[ -f $YACM_PROFILES_DIR/$profile_name.yml ]]; then
            rm $YACM_PROFILES_DIR/$profile_name.yml;
            echo -e "\nProfile \e[32m$profile_name\e[0m deleted!";
          else
            echo -e "\n\e[31mInvalid profile name!\e[0m"
          fi
        else
          echo -e "\e[31mNo profiles currently exist!\e[0m"
        fi;;
      *)
        echo -e "\e[31mUnrecognized subcommand for profile command.\e[0m\n";
        profile_help;;
    esac
  fi
}

function profile_create() {
  touch $YACM_PROFILES_DIR/$1.yml;
  echo -e "Created \e[32m$1\e[0m profile!";
}

function set_global_args() {
  # global arguments are removed before the main processing is done
  MAIN_ARGS=()
  while [[ $# -gt 0 ]] ; do
    key="$1"
    case $key in
      -Y|--yadm-dir) # override the standard YADM_DIR
        YADM_DIR="$(qualify_path "$2" "yadm")"
        shift
      ;;
      --yadm-base-dir) # override the standard YADM_BASE_DIR
        YADM_BASE_DIR="$(qualify_path "$2" "data")"
        shift
      ;;
      *) # main arguments are kept intact
        MAIN_ARGS+=("$1")
      ;;
    esac
    shift
  done
}

function set_yacm_defaults() {
  # only set YACM_BASE_DIR if it hasn't already be set
  if [ -z $YACM_BASE_DIR ]; then
    local base_yacm_dir="${XDG_CONFIG_DIR:-$HOME/.config}";
    YACM_BASE_DIR="${base_yacm_dir}";
  fi

  # only set YACM_DIR if it hasn't already be set
  if [ -z $YACM_DIR ]; then
    YACM_DIR="${YACM_BASE_DIR}/yacm";
  fi

  # only set YACM_PROFILES_DIR if it hasn't already be set
  if [ -z $YACM_PROFILES_DIR ]; then
    YACM_PROFILES_DIR="${YACM_DIR}/profiles";
  fi
}

set_global_args "$@";
set_yacm_defaults;
main "${MAIN_ARGS[@]}";
