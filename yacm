#!/bin/bash

YACM_VERSION="0.0.1";

YACM_BASE_DIR=;
YACM_DIR=;
YACM_PROFILES_DIR=;
YACM_SCRIPTS_DIR=;

function main() {
  # Capture full command, for passing to hooks
  # the parameters will be space delimited and
  # spaces, tabs, and backslashes will be escaped
  _tab=$'\t'
  for param in "$@"; do
    param="${param//\\/\\\\}"
    param="${param//$_tab/\\$_tab}"
    param="${param// /\\ }"
    _fc+=( "$param" )
  done
  FULL_COMMAND="${_fc[*]}"

  # Create the YACM_DIR & YACM_DATA if they doesn't exist yet
  [ -d "$YACM_BASE_DIR" ] || mkdir -p "$YACM_BASE_DIR"
  [ -d "$YACM_DIR" ] || mkdir -p "$YACM_DIR"
  [ -d "$YACM_PROFILES_DIR" ] || mkdir -p "$YACM_PROFILES_DIR"
  [ -d "$YACM_SCRIPTS_DIR" ] || mkdir -p "$YACM_SCRIPTS_DIR"

  internal_commands="^(bootstrap|help|-h|--help|init|profile|version|-v|--version)$"

  if [ -z "$1" ] ; then
    # No argumnts will result in help()
    help;
  elif [[ "$1" =~ $internal_commands ]]; then
    case "$1" in
      bootstrap)
        bootstrap $2 $3;;
      help|-h|--help)
        help;;
      init)
        init $2;;
      profile)
        profile $2 $3 ;;
      version|-v|--version)
        version;;
    esac
  else
    # Invalid command, throw error and run help menu
    echo -e '\e[31mIt appears you have entered an invalid command!\e[0m\n';
    help
  fi    
}

function help() {
  local msg;
  IFS='' read -r -d '' msg << EOF
Configure your system(s) with any executable(s) YOU design!

Usage: yacm [global options] <command> [subcommand]

Commands:
  yacm bootstrap      - Bootstrap the current system
  yacm init           - Initalize a new profile for a system
  yacm profile        - Creates and manages system profiles
  yacm help           - Prints this menu
  yacm version        - Prints current yacm version

Alternative commands:
  --help              - Prints this menu
  --version           - Prints current yacm version
  -h                  - Prints this menu
  -v                  - Prints current yacm version

Global subcommands:
  help                - Prints help menu for subcommand

Global options (use these before the command, if any):
  --yacm-base-dir     - Overrides the standard yacm dir
                        default: {$HOME/.config}
  --yacm-dir          - Overrides the standard yacm dir
                        default: {$YACM_BASE_DIR/yacm}
  --yacm-profiles-dir - Overrides the standard yacm dir
                        default: {$YACM_DIR/profiles}
EOF
  printf '%s' "$msg";
}

function bootstrap_help() {
  local msg;
  IFS='' read -r -d '' msg << EOF
Used to bootstrap the current system with the currently
set profile or with the profile specified.

Usage: yacm bootstrap [subcommand]

Subcommands:
  help    - Prints this menu
  profile - Used to specify which profile to use

Alternative subcommands:
  --help  - Prints this menu
  -h      - Prints this menu
EOF
  printf '%s' "$msg";
}

function init_help() {
  local msg;
  IFS='' read -r -d '' msg << EOF
Used to create profile if none are present and
set default profile for current system.

Usage: yacm init [subcommand]

Subcommands:
  help   - Prints this menu

Alternative subcommands:
  --help - Prints this menu
  -h     - Prints this menu
EOF
  printf '%s' "$msg";
}

function profile_help() {
  local msg;
  IFS='' read -r -d '' msg << EOF
Used to create and manage yacm profiles

Usage: yacm profile <subcommand> [profile name]

Subcommands:
  create  - Creates a new profile
  default - Sets default profile for current system
  delete  - Deletes a profile
  list    - List profiles on system
  help    - Prints this menu

Alternative subcommands:
  --help  - Prints this menu
  --rm    - Deletes a profile
  -h      - Prints this menu
  -l      - List profiles on system
EOF
  printf '%s' "$msg";
}

function bootstrap() {
  local subcommand=$1;
  if [[ -z $subcommand ]]; then
    echo "Checking current default profile...";
    local default_profile="$(cat $YACM_DIR/default_profile 2>/dev/null)";
    if [[ -f $YACM_PROFILES_DIR/$default_profile.yml ]]; then
      echo -e "\nBootstrapping system with profile: \e[32m$default_profile\e[0m...";
      bootstrap_system $default_profile
    else
      echo -e "\n\e[31mNo default profile currently set!.\e[0m";
      echo -e "Please run: \e[32myacm profile default\e[0m to set default for this system or";
      echo -e "run: \e[32myacm bootstrap profile [profile_name]\e[0m to specify which profile to use.";
    fi
  else
    case "$subcommand" in
      help|-h|--help)
        bootstrap_help;;
      profile)
        if [[ -f $YACM_PROFILES_DIR/$2.yml ]]; then
          echo -e "Bootstrapping system with profile: \e[32m$2\e[0m...";
          bootstrap_system $2;
        else
          echo -e "\e[31mERROR: provided profile doesn't exist!.\e[0m";
          echo "Please specify a profile that exists.";
          echo -e "To see profiles that exists run: \e[32m yacm profile list\e[0m.";
        fi;;
      *)
        echo -e "\e[31mUnrecognized subcommand for bootstrap command.\e[0m\n";
        bootstrap_help;;
    esac
  fi
}

function init() {
  local subcommand=$1;
  if [[ -z $subcommand ]]; then
    echo -e "Initializng yacm...\n";
    if [ ! "$(ls -A $YACM_PROFILES_DIR)" ]; then
      profile create;
      read -p "Would you like to make this profile the default for this system? (Y/n)" yn;
      case $yn in
        [Yy]*)
          echo "$(basename $YACM_PROFILES_DIR/*.yml .yml)" > $YACM_DIR/default_profile;;
        [Nn]*)
          echo -e "To set a profile as default later please run: \e[32m yacm profile default\e[0m";;
        "")
          echo "$(basename $YACM_PROFILES_DIR/*.yml .yml)" > $YACM_DIR/default_profile;;
        *)
          echo "Please answer yes or no.";;
      esac
    else
      profile default;
    fi
    echo -e "\nFinished initializing yacm!";
  else
    case "$subcommand" in
      help|-h|--help)
        init_help;;
      *)
        echo -e "\e[31mUnrecognized subcommand for init command.\e[0m\n";
        init_help;;
    esac
  fi
}

function profile() {
  local subcommand=$1;
  if [[ ! -z $subcommand ]]; then
    case "$subcommand" in
      help|-h|--help)
        profile_help;;
      list|-l)
        if [ ! -z "$(ls $YACM_PROFILES_DIR/*.yml 2>/dev/null)" ]; then
          echo "Profiles:";
          for file in $(ls $YACM_PROFILES_DIR/*.yml);
          do
            echo "  $(basename $file .yml)";
          done
        else
          echo -e "\e[31mNo profiles present!\e[0m\n";
          echo -e "\e[31mPleace run \e[32myacm init\e[31m!\e[0m";
        fi;;
      create|--create)
        echo -e "Creating new profile...\n";
        if [ -z $2 ]; then
          echo "What would you like this profile to be called?";
          read profile_name;
        else
          profile_name=$2;
        fi

        if [[ ! -f "$YACM_PROFILES_DIR/$profile_name.yml" ]]; then
          profile_create $profile_name;
        else
          echo "Profile already exists!";
          read -p "Would you like to recreate it? (y/N)" yn;
          case $yn in
            [Yy]*)
              rm $YACM_PROFILES_DIR/$profile_name.yml;
              profile_create $profile_name;;
            [Nn]*)
              echo -e "\nCancelled profile creation";;
            "")
              echo "\nCancelled profile creation";;
            *)
              echo "Please answer yes or no.";;
          esac
        fi;;
      default)
        local selected_profile=$2;
        if [[ ! -z $selected_profile ]]; then
          if [[ -f "$YACM_PROFILES_DIR/$selected_profile.yml" ]]; then
            echo "$(basename $YACM_PROFILES_DIR/$selected_profile.yml .yml)" > $YACM_DIR/default_profile;
            echo -e "\nSuccessfully set default profile to \e[32m$selected_profile\e[0m!";
          else
            echo -e "\e[31mERROR: provided profile doesn't exist!.\e[0m";
            echo "Please specify a profile that exists.";
            echo -e "To see profiles that exists run: \e[32m yacm profile list\e[0m.";
          fi
        else
          while [[ -z $selected_profile ]]; do
            echo -e "Which of the following profiles would you like to set as default for this system?\n";
            profile list;
            echo "";
            read -p "Default: " prompt;
            if [[ -f "$YACM_PROFILES_DIR/$prompt.yml" ]]; then
              selected_profile=$prompt;
              echo "$(basename $YACM_PROFILES_DIR/$selected_profile.yml .yml)" > $YACM_DIR/default_profile;
              echo -e "Profile \e[32m$selected_profile\e[0m set as default.";
            else
              echo -e "\n\e[31mPlease specify an existing profile\e[0m\n";
            fi
          done
        fi;;
      delete|--delete)
        if [ ! -z "$(ls $YACM_PROFILES_DIR/*.yml 2>/dev/null)" ]; then
          if [ -z $2 ]; then
            echo -e "Which profile would you like to delete?\n";
            profile list;
            read profile_name;
            echo "";
          else
            profile_name=$2;
          fi

          if [[ -f $YACM_PROFILES_DIR/$profile_name.yml ]]; then
            rm $YACM_PROFILES_DIR/$profile_name.yml;
            echo -e "Profile \e[32m$profile_name\e[0m deleted!";
          else
            echo -e "\e[31mInvalid profile name!\e[0m";
          fi
        else
          echo -e "\e[31mNo profiles currently exist!\e[0m";
        fi;;
      *)
        echo -e "\e[31mUnrecognized subcommand for profile command.\e[0m\n";
        profile_help;;
    esac
  else
    profile_help;
  fi
}

function version() {
  echo "YACM: Yet Another Configuration Manager";
  echo "Version: v$YACM_VERSION";
}

function set_hostname() {
  local __hostname=$1;
  echo -e "\nSetting hostname to: \e[32m$__hostname\e[0m...";
  sudo sh -c "echo $__hostname > /etc/hostname";
}

function install_packages() {
  # TODO make this work
  local __package_manager=$1;
  local __packages=$2;

  if [[ ! -z $__packages ]]; then
    case $__package_manager in
      apt)
        sudo apt update && sudo apt --yes install $__packages;;
      dnf)
        echo "dnf";;
      pacman)
        sudo pacman -Sy $__packages --noconfirm --needed;;
      paru)
        paru -Sy $__packages --noconfirm --needed --skipreview;;
      yum)
        echo "yum";;
      *)
        echo -e "\e[31mUnsupported package manager defined!\e[0m";
        print_supported_package_managers;;
    esac
  else
    echo "No packages provided. Skipping over package installation...";
  fi
}

function enable_services() {
  # TODO make this work
  local __init_system=$1;
  local __services=$2;

  if [[ ! -z $__services ]]; then
    case $__init_system in
      systemd)
        sudo systemctl enable $__services;;
      runit)
        echo "runit";;
      *)
        echo -e "\e[31mUnsupported init_system defined!\e[0m";
        print_supported_init_systems;;
    esac
  else
    echo "No services specified. Skipping over enabling services...";
  fi
}

function run_script() {
  if [[ -f $YACM_SCRIPTS_DIR/$1 ]]; then
    echo -e "Executing: \e[32m$YACM_SCRIPTS_DIR/$1\e[0m...";
    $YACM_SCRIPTS_DIR/$1;
  else
    echo -e "\e[31mError: \e[32m$YACM_SCRIPTS_DIR/$1\e[31m not found!\e[0m";
  fi
}

function bootstrap_system() {
  local hostname="$(sed -n -e '/^hostname:/p' $YACM_PROFILES_DIR/$1.yml | awk '{print $2}')";
  set_hostname $hostname;

  echo -e "\nRunning initial scripts if specified:";
  local initial_scripts="$(awk '/^[^ ]/{ f=/^initial_scripts:/; next } f{ print packages, $2 }' $YACM_PROFILES_DIR/$1.yml | sed -n -e 's/^ //p')";
  for script in $initial_scripts; do
    run_script $script;
  done

  echo -e "\nInstalling specified packages with specified package manager:";
  local package_manager="$(sed -n -e '/^package_manager:/p' $YACM_PROFILES_DIR/$1.yml | awk '{print $2}')";
  local packages="$(awk '/^[^ ]/{ f=/^packages:/; next } f{ print packages, $2 }' $YACM_PROFILES_DIR/$1.yml | tr -d '\n' | sed -n -e 's/^ //' -e 's/ $//p')";
  install_packages $package_manager "$packages";

  echo -e "\nRunning midway scripts if specified:";
  local midway_scripts="$(awk '/^[^ ]/{ f=/^midway_scripts:/; next } f{ print packages, $2 }' $YACM_PROFILES_DIR/$1.yml | sed -n -e 's/^ //p')";
  for script in $midway_scripts; do
    run_script $script;
  done

  echo -e "\nEnabling specified services with specified init system:";
  local init_system="$(sed -n -e '/^init_system:/p' $YACM_PROFILES_DIR/$1.yml | awk '{print $2}')";
  local services="$(awk '/^[^ ]/{ f=/^services:/; next } f{ print services, $2 }' $YACM_PROFILES_DIR/$1.yml | tr -d '\n' | sed -n -e 's/^ //' -e 's/ $//p')";
  enable_services $init_system "$services";

  echo -e "\nRunning final scripts if specified:";
  local final_scripts="$(awk '/^[^ ]/{ f=/^final_scripts:/; next } f{ print packages, $2 }' $YACM_PROFILES_DIR/$1.yml | sed -n -e 's/^ //p')";
  for script in $final_scripts; do
    run_script $script;
  done
}

function profile_create() {
  local profile_name=$1;

  local init_system="";
  local package_manager="";
  local packages="";

  while [[ -z $host_name ]]; do
    echo "";
    read -p 'What will the hostname of this device be?: ' host_name;
    if [[ -z $host_name ]]; then
      echo "Please provide a hostname.";
    fi
  done

  select_package_manager package_manager;

  select_packages packages;

  select_init_system init_system;

  select_services services;

  cat >$YACM_PROFILES_DIR/$profile_name.yml <<EOF
---
name: ${profile_name}
hostname: ${host_name}

# Here you can define any custom made executable scripts
# that you would like to have run before moving on to
# package installation.
# initial_scripts:

package_manager: ${package_manager}
packages:${packages}

# Here you can define any custom made executable scripts
# that you would like to have run before moving on to
# enabling services.
# midway_scripts:

init_system: ${init_system}
services:${services}

# Here you can define any custom made executable scripts
# that you would like to have run as a final bootstrap
# step.
# final_scripts:
EOF
  echo -e "\nCreated \e[32m$profile_name\e[0m profile!";
}

function print_supported_package_managers() {
  echo -e "\nyacm currently supports the following package managers:";
  echo "  1) apt";
  echo "  2) dnf";
  echo "  3) pacman";
  echo "  4) paru";
  echo "  5) yum";
}

function select_package_manager() {
  local __package_manager=$1;

  while [[ -z $selected_package_manager ]]; do
    print_supported_package_managers;
    read -p "Which package manager would you like to use?: " prompt;
    case $prompt in
      "1"|"apt")
        local selected_package_manager="apt";;
      "2"|"dnf")
        local selected_package_manager="dnf";;
      "3"|"pacman")
        local selected_package_manager="pacman";;
      "4"|"paru")
        local selected_package_manager="paru";;
      "5"|"yum")
        local selected_package_manager="yum";;
      *)
        echo -e "\e[31mPlease select a supported package manager\e[0m";;
    esac
  done

  eval $__package_manager="'$selected_package_manager'";
}

function select_packages() {
  local __packages=$1;
  local package_list="";

  echo "";
  read -p "Please type the package you would like to install or type done to finish: " prompt;

  while [[ $prompt != "done" ]]; do
    if [[ ! -z $prompt ]]; then
      package_list="$package_list
  - $prompt";
    fi

    read -p "Addtional packages (type done to finsh): " prompt;
  done

  eval $__packages="'$package_list'";
}

function print_supported_init_systems() {
  echo -e "\nyacm currently supports the following init system";
  echo "  1) systemd";
  echo "  2) runit";
}

function select_init_system() {
  local __init_system=$1;

  while [[ -z $selected_init_system ]]; do
    print_supported_init_systems;
    read -p "Which init system would you like to use?: " prompt;
    case $prompt in
      "1"|"systemd")
        selected_init_system="systemd";;
      "2"|"runit")
        selected_init_system="runit";;
      *)
        echo -e "\e[31mPlease select a supported init system\e[0m";;
    esac
  done

  eval $__init_system="'$selected_init_system'";
}

function select_services() {
  local __services=$1;
  local service_list="";

  echo "";
  read -p "Please type the name of a service you would like to enable or type done to finish: " prompt;

  while [[ $prompt != "done" ]]; do
    if [[ ! -z $prompt ]]; then
      service_list="$service_list
  - $prompt";
    fi

    read -p "Addtional services (type done to finsh): " prompt;
  done

  eval $__services="'$service_list'";
}

function qualify_path() {
  local path="$1";
  if [ "$path" = "." ]; then
    path="$PWD";
  elif [[ "$path" != /* ]]; then
    path="$PWD/${path#./}";
  fi
  echo "$path";
}

function set_global_args() {
  # global arguments are removed before the main processing is done
  MAIN_ARGS=()
  while [[ $# -gt 0 ]] ; do
    key="$1"
    case $key in
      --yacm-dir) # override the standard YACM_DIR
        if [ -z "$2" ]; then
          echo -e "\e[31mWarning! You can't specify an empty \e[32myacm-dir\e[31m path\e[0m";
          exit 1
        fi
        YACM_DIR="$(qualify_path "$2" "yacm-dir")"
        shift;;
      --yacm-base-dir) # override the standard YACM_BASE_DIR
        if [ -z "$2" ]; then
          echo -e "\e[31mWarning! You can't specify an empty \e[32myacm-base-dir\e[31m path\e[0m";
          exit 1
        fi
        YACM_BASE_DIR="$(qualify_path "$2" "data")"
        shift;;
      --yacm-profiles-dir) # override the standard YACM_PROFILES_DIR
        if [ -z "$2" ]; then
          echo -e "\e[31mWarning! You can't specify an empty \e[32myacm-profiles-dir\e[31m path\e[0m";
          exit 1
        fi
        YACM_PROFILES_DIR="$(qualify_path "$2")"
        shift;;
      --yacm-scripts-dir) # override the standard YACM_SCRIPTS_DIR
        if [ -z "$2" ]; then
          echo -e "\e[31mWarning! You can't specify an empty \e[32myacm-scripts-dir\e[31m path\e[0m";
          exit 1
        fi
        YACM_SCRIPTS_DIR="$(qualify_path "$2")"
        shift;;
      *) # main arguments are kept intact
        MAIN_ARGS+=("$1");;
    esac
    shift
  done
}

function set_yacm_defaults() {
  # only set YACM_BASE_DIR if it hasn't already be set
  if [ -z $YACM_BASE_DIR ]; then
    local base_yacm_dir="${XDG_CONFIG_DIR:-$HOME/.config}";
    YACM_BASE_DIR="${base_yacm_dir}";
  fi

  # only set YACM_DIR if it hasn't already be set
  if [ -z $YACM_DIR ]; then
    YACM_DIR="${YACM_BASE_DIR}/yacm";
  fi

  # only set YACM_PROFILES_DIR if it hasn't already be set
  if [ -z $YACM_PROFILES_DIR ]; then
    YACM_PROFILES_DIR="${YACM_DIR}/profiles";
  fi

  # only set YACM_SCRIPTS_DIR if it hasn't already be set
  if [ -z $YACM_SCRIPTS_DIR ]; then
    YACM_SCRIPTS_DIR="${YACM_DIR}/scripts";
  fi
}

set_global_args "$@";
set_yacm_defaults;
main "${MAIN_ARGS[@]}";
